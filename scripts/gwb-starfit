#!/usr/bin/env python
from __future__ import print_function, division
import sys, os
import time
import logging

# To make figures on compute servers
import matplotlib
matplotlib.use('AGG')

import tables
from astropy import log as logger

from gwb.starmodels import TGASWideBinaryStarModel, TGASStarModel, STARMODELDIR
from isochrones import StarModel

def main(ic, star1, star2, group='', overwrite=False, figs_only=False,
         single=False):

    model_dir = os.path.join(STARMODELDIR, group, 'models')
    fig_physical_dir = os.path.join(STARMODELDIR, group, 'figures', 'physical')
    fig_observed_dir = os.path.join(STARMODELDIR, group, 'figures', 'observed')
    for d in [model_dir, fig_physical_dir, fig_observed_dir]:
        if not os.path.exists(d):
            os.makedirs(d)

    if not single:
        i1 = min(star1, star2)
        i2 = max(star1, star2)
        name = '{}-{}'.format(i1,i2)
    else:
        name = str(star1)

    h5file = os.path.join(model_dir, '{}.h5'.format(name))
    if os.path.exists(h5file) and not overwrite and not figs_only:
        logging.info('{} exists; skipping.'.format(h5file))
        return 

    if figs_only:
        try:
            mod = StarModel.load_hdf(h5file)
        except:
            import traceback
            traceback.print_exc()
            logging.error('Cannnot load StarModel from {}'.format(h5file))
            return
    else:

        if not single:
            mod = TGASWideBinaryStarModel(ic, star1, star2)
        else:
            mod = TGASStarModel(ic, star1)

        try:
            mod.obs.print_ascii()
        except:
            pass

        sys.stdout.write('Fitting star model for {}...'.format(mod.name))
        start = time.time()
        mod.fit(verbose=False, overwrite=overwrite)
        end = time.time()
        sys.stdout.write('Fit took {:.2f} min.\n'.format((end-start)/60.))

    sys.stdout.write('Writing corner plots...')
    try:
        fig1 = mod.corner_physical()
        fig1.savefig(os.path.join(fig_physical_dir, '{}-physical.png'.format(mod.name)))
    except:
        logging.error('Cannot make corner_physical for {}'.format(mod.name))
        import traceback
        traceback.print_exc()
    try:
        fig2 = mod.corner_observed()
        fig2.savefig(os.path.join(fig_observed_dir, '{}-observed.png'.format(mod.name)))
    except:
        logging.error('Cannot make corner_observed for {}'.format(mod.name))
        import traceback
        traceback.print_exc()

    h5file = os.path.join(model_dir, '{}.h5'.format(mod.name))
    mod.save_hdf(h5file, overwrite=True)
    sys.stdout.write('Done.  Starmodel saved to {}.\n'.format(h5file))

if __name__=='__main__':
    
    import argparse

    parser = argparse.ArgumentParser(description="Fit coeval binary model to two stars")

    parser.add_argument('stars', nargs='*', type=int, help='pairs of stars')
    parser.add_argument('-o','--overwrite', action='store_true')
    parser.add_argument('--simple_extinction', action='store_true')
    parser.add_argument('--figs_only', action='store_true')
    parser.add_argument('-g', '--group', default='')
    parser.add_argument('-s', '--single', action='store_true')

    vq_group = parser.add_mutually_exclusive_group()
    vq_group.add_argument('-v', '--verbose', action='count', default=0, dest='verbosity')
    vq_group.add_argument('-q', '--quiet', action='count', default=0, dest='quietness')

    args = parser.parse_args()

    # Set logger level based on verbose flags
    if args.verbosity != 0:
        if args.verbosity == 1:
            logger.setLevel(logging.DEBUG)
        else: # anything >= 2
            logger.setLevel(1)

    elif args.quietness != 0:
        if args.quietness == 1:
            logger.setLevel(logging.WARNING)
        else: # anything >= 2
            logger.setLevel(logging.ERROR)

    else: # default
        logger.setLevel(logging.INFO)

    from isochrones import get_ichrone

    ic = get_ichrone('mist', simple_extinction=args.simple_extinction)

    if not args.single:
        N = len(args.stars)//2
        for i in range(len(args.stars)//2):
            star1 = args.stars[2*i]
            star2 = args.stars[2*i + 1]
            print('{} of {}: ({})'.format(i+1, N, '{}-{}'.format(star1, star2)))
            try:
                main(ic, star1, star2, group=args.group, 
                        overwrite=args.overwrite, figs_only=args.figs_only)
            except:
                logging.error('Error with pair {} {}!'.format(star1, star2))
                import traceback
                traceback.print_exc()

            tables.file._open_files.close_all()
    else:
        N = len(args.stars)
        for i, star in enumerate(args.stars):
            print('{} of {}: ({})'.format(i+1, N, star))
            try:
                main(ic, star, None, group=args.group, overwrite=args.overwrite,
                        single=True, figs_only=args.figs_only)
            except:
                logging.error('Error with {}!'.format(star))
                import traceback
                traceback.print_exc()

            tables.file._open_files.close_all()
